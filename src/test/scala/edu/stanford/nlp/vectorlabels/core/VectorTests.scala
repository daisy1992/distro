package edu.stanford.nlp.vectorlabels.core

import org.scalatest.{Matchers, FlatSpec}

/**
 *
 *
 * @author svivek
 */
class VectorTests extends FlatSpec with Matchers {
  "A dense vector" should "store a collection of doubles in sequence" in {
    val v = DenseVector(2, 3, 4, 5, 6)
    v(0) should be(2.0)
    v(1) should be(3.0)
    v(2) should be(4.0)
    v(3) should be(5.0)
    v(4) should be(6.0)
  }

  it should "know its own dimensionality" in {
    val v = DenseVector(2, 3, 4, 5, 6)
    v.size should be(5)
  }

  it should "know its norm" in {
    val v = DenseVector(2, 3, 4)
    v.norm should be(math.sqrt(29))
  }

  "A sparse vector" should "be created using a set of tuples" in {
    val v = SparseVector(5, 1 -> 3.0, 2 -> 4.0)

    v(0) should be(0.0)
    v(1) should be(3.0)
    v(2) should be(4.0)
    v(3) should be(0.0)
    v(4) should be(0.0)

    val v1 = SparseVector(5, 1 -> 3.0, 2 -> 4.0, 4 -> 0.0)

    v1(0) should be(0.0)
    v1(1) should be(3.0)
    v1(2) should be(4.0)
    v1(3) should be(0.0)
    v1(4) should be(0.0)
  }

  it should "know its own dimensionality" in {
    val v = SparseVector(5, 1 -> 3.0, 2 -> 4.0)
    v.size should be(5)
  }

  it should "know its norm" in {
    val v = SparseVector(3, 1 -> 2)
    v.norm should be(2.0)
  }

  "Vectorizing an outer product tensor of two dense vectors" should "produce a vector of the outer product columnwise" in {
    val v1 = DenseVector(5, 7, 11)
    val v2 = DenseVector(2, 3)

    val v3 = (v1 o v2).vectorize

    v3(0) should be(10.0)
    v3(1) should be(14.0)
    v3(2) should be(22.0)
    v3(3) should be(15.0)
    v3(4) should be(21.0)
    v3(5) should be(33.0)
  }

  "Vectorizing an outer product tensor of two sparse vectors" should "produce a vector of the outer product columnwise" in {
    val v1 = SparseVector(3, 1 -> 7)
    val v2 = SparseVector(2, 1 -> 3)

    val v3 = (v1 o v2).vectorize

    v3(0) should be(0.0)
    v3(1) should be(0.0)
    v3(2) should be(0.0)
    v3(3) should be(0.0)
    v3(4) should be(21.0)
    v3(5) should be(0.0)
  }


  "A dot product" should "work for two dense vectors" in {
    val dv0 = DenseVector(5, 7, 11)
    val dv1 = DenseVector(1, 2, 3)

    (dv0 dot dv1) should be(52.0)
    (dv1 dot dv0) should be(52.0)
  }

  it should "work for a dense vector and a sparse vector" in {
    val dv0 = DenseVector(5, 7, 11)

    val sv = SparseVector(3, 1 -> 2, 2 -> 3)

    (dv0 dot sv) should be(47.0)
    (sv dot dv0) should be(47.0)
  }

  it should "work for a dense vector and a read only vector generated by vectorizing an outer product of dense vectors" in {
    val dv0 = DenseVector(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)
    val dv1 = DenseVector(5, 7, 11)
    val dv2 = DenseVector(2, 3)

    val vv = (dv1 o dv2).vectorize

    val expected = 0.1 * 10 + 0.2 * 14 + 0.3 * 22 + 0.4 * 15 + 0.5 * 21 + 0.6 * 33

    (vv dot dv0) should be(expected)
    (dv0 dot vv) should be(expected)
  }

  it should "work for a dense vector and a read only vector generated by vectorizing an outer product of sparse vectors" in {
    val dv0 = DenseVector(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)
    val sv1 = SparseVector(3, 0 -> 5, 1 -> 7)
    val sv2 = SparseVector(2, 1 -> 3)

    val vv = (sv1 o sv2).vectorize

    val expected = 0.4 * 15 + 0.5 * 21

    (vv dot dv0) should be(expected)
    (dv0 dot vv) should be(expected)
  }

  it should "work for two sparse vectors" in {
    val sv0 = SparseVector(3, 0 -> 5, 1 -> 7)
    val sv1 = SparseVector(3, 1 -> 2, 2 -> 3)

    (sv0 dot sv1) should be(14.0)
    (sv1 dot sv0) should be(14.0)
  }

  "Vector addition" should "add two dense vectors" in {
    val dv0 = DenseVector(5, 7, 11)
    val dv1 = DenseVector(1, 2, 3)

    val sum = dv0 + dv1

    sum(0) should be(6.0)
    sum(1) should be(9.0)
    sum(2) should be(14.0)

    sum.keys should be(Array(0, 1, 2))
  }

  it should "add two sparse vectors" in {
    val sv0 = SparseVector(3, 0 -> 5, 1 -> 7)
    val sv1 = SparseVector(3, 1 -> 2)

    val sum = sv0 + sv1

    sum(0) should be(5.0)
    sum(1) should be(9.0)

    sum.keys.sorted should be(Array(0, 1))
  }


  it should "add two read only vectors" in {
    val sv1 = SparseVector(3, 0 -> 5, 1 -> 7)
    val sv2 = SparseVector(2, 1 -> 3)

    val v1 = (sv1 o sv2).vectorize


    val sv3 = SparseVector(2, 0 -> 2)
    val sv4 = SparseVector(2, 0 -> 1)

    val v2 = (sv3 o sv4).vectorize

    val sum = v1 + v2

    sum(0) should be(2.0)
    sum(3) should be(15.0)
    sum(4) should be(21.0)
    sum.keys.sorted should be(Array(0, 3, 4))
  }
}
